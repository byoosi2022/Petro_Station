[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Dipping Log",
  "enabled": 1,
  "modified": "2024-05-09 04:56:42.990789",
  "module": "Petro Station App",
  "name": "Dipping",
  "script": "frappe.ui.form.on('Dipping Log', {\r\n    onload: function(frm) {\r\n        if (!frm.doc.current_dipping_level) {\r\n            frappe.prompt([\r\n                {\r\n                    fieldname: 'current_dipping_level',\r\n                    fieldtype: 'Float',\r\n                    label: __('Current Dipping Level'),\r\n                    reqd: 1\r\n                }\r\n            ], function(values){\r\n                frm.set_value('current_dipping_level', values.current_dipping_level);\r\n            }, __('Enter Current Dipping Level'));\r\n        }\r\n    },\r\n    tank: function(frm) {\r\n        frappe.call({\r\n            method: 'petro_station_app.custom_api.dipping_levels.get_warehouse_from_tank',\r\n            args: {\r\n                tank: frm.doc.tank\r\n            },\r\n            callback: function(response) {\r\n                if (response.message && response.message.length > 0) {\r\n                    // Assuming only one item is returned in the response\r\n                    let warehouseDetails = response.message[0];\r\n                    frm.set_value('current_acty_qty', warehouseDetails.actual_qty);\r\n                    frm.set_value('item_code', warehouseDetails.item_code);\r\n\r\n                    // Calculate dipping_difference\r\n                    let dippingDifference = frm.doc.current_acty_qty - frm.doc.current_dipping_level;\r\n                    frm.set_value('dipping_difference', dippingDifference);\r\n                } else {\r\n                    frappe.msgprint('No warehouse details found for the selected tank.');\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Dipping Log', {\r\n    current_dipping_level: function(frm) {\r\n        // Recalculate dipping_difference\r\n        let dippingDifference = frm.doc.current_acty_qty - frm.doc.current_dipping_level;\r\n        frm.set_value('dipping_difference', dippingDifference);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Fuel Sales App",
  "enabled": 1,
  "modified": "2024-06-19 13:00:32.660636",
  "module": "Petro Station App",
  "name": "Fuel app",
  "script": "frappe.ui.form.on('Fuel Sales Items', {\r\n    qty: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    },\r\n    rate: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    }\r\n});\r\n\r\nfunction calculateTotals(frm) {\r\n    var total_qty = 0;\r\n    var grand_total = 0;\r\n    frm.doc.items.forEach(function (item) {\r\n        total_qty += item.qty;\r\n        item.amount = item.qty * item.rate;\r\n        grand_total += item.amount;\r\n    });\r\n    frm.set_value('total_qty', total_qty);\r\n    frm.set_value('grand_totals', grand_total);\r\n    refresh_field('items');\r\n}\r\n\r\nfrappe.ui.form.on('Fuel Sales Items', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        var child_doc = locals[cdt][cdn];\r\n        if (child_doc.item_code) {\r\n            frappe.call({\r\n                method: 'petro_station_app.custom_api.api.get_item_price_rate',\r\n                args: {\r\n                    item_code: child_doc.item_code,\r\n                    price_list: frm.doc.price_list\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        frappe.model.set_value(cdt, cdn, 'rate', r.message);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Fuel Sales App', {\r\n    date: function(frm) {\r\n        // Calculate the due date as posting date + 30 days\r\n        var postingDate = new Date(frm.doc.date);\r\n        var dueDate = new Date(postingDate.setDate(postingDate.getDate() + 30));\r\n\r\n        // Set the due date in the form\r\n        frm.set_value('due_date', dueDate);\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Fuel Sales App', {\r\n    grand_totals: function(frm) {\r\n        calculateResult(frm);\r\n    },\r\n    additional_discount_amount: function(frm) {\r\n        calculateResult(frm);\r\n    }\r\n});\r\n\r\nfunction calculateResult(frm) {\r\n    // Get the values of field1 and field2\r\n    var field1Value = frm.doc.grand_totals;\r\n    var field2Value = frm.doc.additional_discount_amount;\r\n\r\n    // Perform the subtraction\r\n    var result = field1Value - field2Value;\r\n\r\n    // Update the result field\r\n    frm.set_value('net_total', result);\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Fuel Sales App",
  "enabled": 1,
  "modified": "2024-05-15 16:07:19.486859",
  "module": "Petro Station App",
  "name": "Fuel App STP",
  "script": "frappe.ui.form.on('Fuel Sales App', {\r\n  station: function(frm) {\r\n    frappe.call({\r\n      method: 'petro_station_app.custom_api.api.fetch_details_cost_center',\r\n      args: {\r\n        station: frm.doc.station,\r\n      },\r\n      callback: function(r) {\r\n        if (r.message) {\r\n          var items = r.message.from_pos_profile; // Corrected key name\r\n          var from_price_list = r.message.from_price_list; // Corrected key name\r\n          \r\n          if (from_price_list && Array.isArray(from_price_list) && from_price_list.length > 0) {\r\n            frm.set_value('price_list', from_price_list[0].name);\r\n          } else {\r\n            console.log(\"No price lists data found in response.\");\r\n          }\r\n\r\n          if (items && Array.isArray(items)) {\r\n            // Clear existing items before populating (optional)\r\n            frm.doc.items = [];\r\n\r\n            // Loop through each item in the response\r\n            for (var i = 0; i < items.length; i++) {\r\n              var new_item = frm.add_child('items'); // Create a new child row\r\n\r\n              // Set values from response to new item fields\r\n              new_item.item_code = items[i].custom_fuel; // Replace with actual field names \r\n              new_item.pos_profile = items[i].name;\r\n              new_item.warehouse = items[i].warehouse;\r\n              new_item.rate = items[i].item_price;\r\n              new_item.price_list = from_price_list[0].name;\r\n              // ... Add other relevant fields\r\n\r\n              // Refresh the child table view\r\n              frm.refresh_field('items');\r\n            }\r\n          } else {\r\n            console.log(\"No items data found in response.\");\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-06-04 17:28:54.859532",
  "module": "Petro Station App",
  "name": "Purchase Manage Items",
  "script": "frappe.ui.form.on('Purchase Management', {\r\n    refresh(frm) {\r\n        // Your code here\r\n    }\r\n});\r\n\r\n// frappe.ui.form.on('Stock transfer Item', {\r\n//     qty: function (frm, cdt, cdn) {\r\n//         calculateTotalsTransfers(frm);\r\n//     }\r\n// });\r\n\r\n// function calculateTotalsTransfers(frm) {\r\n//     var total_qty = 0;\r\n//     frm.doc.stock_items.forEach(function (item) {\r\n//         total_qty += item.qty;\r\n//     });\r\n//     frm.set_value('total_qtys', total_qty);\r\n//     refresh_field('stock_items');\r\n// }\r\n\r\nfrappe.ui.form.on('Purchase Management Items', {\r\n    qty: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    },\r\n    rate: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    }\r\n});\r\n\r\nfunction calculateTotals(frm) {\r\nfrappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Currency Exchange\",\r\n            filters: {\r\n                date: frm.doc.date // Assuming you have a date field in your form\r\n            },\r\n            fields: [\"exchange_rate\"],\r\n            limit_page_length: 1\r\n        },\r\n        callback: function(response) {\r\n           // Define a currency formatter for USD\r\n            var formatter = new Intl.NumberFormat('en-US', {\r\n                style: 'currency',\r\n                currency: 'USD',\r\n                minimumFractionDigits: 2\r\n            });\r\n            \r\n            var formatter2 = new Intl.NumberFormat('en-US', {\r\n                        maximumFractionDigits: 2\r\n            });\r\n\r\n            var ex_rate = 1; // Default exchange rate if not found\r\n            if (response.message && response.message.length > 0) {\r\n                ex_rate = response.message[0].exchange_rate;\r\n            }\r\n            var total_qty = 0;\r\n            var grand_total = 0;\r\n            var grand_total_usd = 0;\r\n            frm.doc.items.forEach(function(item) {\r\n                item.amount = formatter.format(item.amount)\r\n                  item.amount = item.qty * item.rate;\r\n                 \r\n                \r\n                var real_dollars = item.qty * item.rate / ex_rate;\r\n                item.amt_usd = formatter.format(real_dollars); // Adding $ symbol and formatting to 2 decimal places\r\n                total_qty += item.qty;\r\n                grand_total += item.amount;\r\n                grand_total_usd += real_dollars;\r\n            });\r\n\r\n  \r\n            frm.set_value('grand_total_usds', formatter2.format(grand_total_usd));\r\n            frm.set_value('total_qty', total_qty);\r\n            frm.set_value('grand_totals', grand_total);\r\n            refresh_field('items');\r\n        }\r\n    });\r\n}\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-05-24 16:56:07.770998",
  "module": "Petro Station App",
  "name": "PV Management Items",
  "script": "frappe.ui.form.on('Purchase Management', {\r\n    date: function(frm) {\r\n        // Calculate the due date as posting date + 30 days\r\n        var postingDate = new Date(frm.doc.date);\r\n        var dueDate = new Date(postingDate.setDate(postingDate.getDate() + 30));\r\n\r\n        // Set the due date in the form\r\n        frm.set_value('due_date', dueDate);\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-05-27 15:41:15.641709",
  "module": "Petro Station App",
  "name": "PV transfer Item",
  "script": "frappe.ui.form.on('Purchase Management Suppliers', {\r\nqty: function(frm, cdt, cdn) {\r\ncalculateTotalsSupplier(frm);\r\n},\r\nexchange_rate: function(frm, cdt, cdn) {\r\ncalculateTotalsSupplier(frm);\r\n},\r\nrate: function(frm, cdt, cdn) {\r\ncalculateTotalsSupplier(frm);\r\n},\r\ncurrency: function(frm, cdt, cdn) {\r\ncalculateTotalsSupplier(frm);\r\n}\r\n});\r\n\r\nfunction calculateTotalsSupplier(frm) {\r\nfrappe.call({\r\nmethod: \"frappe.client.get_list\",\r\nargs: {\r\ndoctype: \"Currency Exchange\",\r\nfilters: {\r\ndate: frm.doc.date // Assuming you have a date field in your form\r\n},\r\nfields: [\"exchange_rate\"],\r\nlimit_page_length: 1\r\n},\r\ncallback: function(response) {\r\n// Define a currency formatter for USD\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\nstyle: 'currency',\r\ncurrency: 'USD',\r\nminimumFractionDigits: 2\r\n});\r\nvar ex_rate = 1; // Default exchange rate if not found\r\nif (response.message && response.message.length > 0) {\r\nex_rate = response.message[0].exchange_rate;\r\n}\r\nvar total_qty = 0;\r\nvar grand_total = 0;\r\nvar grand_total_usd = 0;\r\nfrm.doc.other_items.forEach(function(item) {\r\nif (item.currency === \"USD\") {\r\n    if (typeof item.exchange_rate === 'undefined' || item.exchange_rate === 3675) {\r\n        item.exchange_rate = 3675; // Set to default only if not already set or set to default\r\n    }\r\n    item.amount = item.qty * item.rate * item.exchange_rate;\r\n} else {\r\n    item.amount = item.qty * item.rate;\r\n}\r\n\r\nvar real_dollars = item.amount / ex_rate;\r\nitem.amt_usd = formatter.format(real_dollars); // Adding $ symbol and formatting to 2 decimal places\r\ntotal_qty += item.qty;\r\ngrand_total += item.amount;\r\ngrand_total_usd += real_dollars;\r\n});\r\nfrm.set_value('total_quantity', total_qty);\r\nfrm.set_value('grand_total_ugx', grand_total);\r\nfrm.set_value('grand_total_usd', formatter.format(grand_total_usd));\r\nrefresh_field('other_items');\r\n}\r\n});\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-05-27 00:49:13.938127",
  "module": "Petro Station App",
  "name": "Change Curerency",
  "script": "frappe.ui.form.on('Purchase Management', {\r\n    onload: function(frm) {\r\n        frappe.call({\r\n            method: 'petro_station_app.custom_api.api.get_fuel_items',\r\n            callback: function(response) {\r\n                \r\n                if (response.message && response.message.length > 0) {\r\n                    var fuelItemNames = response.message.map(item => item.name);\r\n                    console.log(fuelItemNames)\r\n                    // Set query for the 'item' field in the child table to filter items by the fetched item names\r\n                    frm.set_query('item', 'stock_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', fuelItemNames]\r\n                            }\r\n                        };\r\n                    });\r\n\r\n                    // Optionally, you can clear and refresh the field to ensure the filter is applied immediately\r\n                    frm.refresh_field('stock_items');\r\n                    \r\n                 frm.set_query('item', 'items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', fuelItemNames]\r\n                            }\r\n                        };\r\n                    });\r\n\r\n                    // Optionally, you can clear and refresh the field to ensure the filter is applied immediately\r\n                    frm.refresh_field('items');\r\n                \r\n                  frm.set_query('item', 'other_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', fuelItemNames]\r\n                            }\r\n                        };\r\n                    });\r\n\r\n                    // Optionally, you can clear and refresh the field to ensure the filter is applied immediately\r\n                    frm.refresh_field('other_items'); \r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-05-27 15:12:17.560205",
  "module": "Petro Station App",
  "name": "set values to CT",
  "script": "frappe.ui.form.on('Purchase Management', {\r\n    supplier: function(frm) {\r\n        // Fetch supplier details\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: \"Supplier\",\r\n                filters: {\r\n                    name: frm.doc.supplier // Use the correct field name for supplier\r\n                },\r\n                fields: [\"default_currency\", \"default_price_list\"],\r\n                limit_page_length: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    var supplierDetails = r.message[0];\r\n                    var default_currency = supplierDetails.default_currency || \"UGX\"; // Set default currency to \"UGX\" if not found\r\n                    var default_price_list = supplierDetails.default_price_list;\r\n\r\n                    frm.set_value('price_list', default_price_list);\r\n                    frm.set_value('currency', default_currency);\r\n\r\n                    // After setting the supplier details, fetch item prices for both child tables\r\n                    fetchItemPrices(frm, default_price_list, default_currency, 'items');\r\n                    fetchOtherItemPrices(frm, 'other_items', default_currency);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfunction fetchItemPrices(frm, price_list, currency, child_table) {\r\n    // Define default items\r\n    var defaultItems = ['PMS', 'AGO', 'BIK'];\r\n\r\n    // Fetch item prices for default items\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: \"Item Price\",\r\n            filters: {\r\n                item_code: ['in', defaultItems],\r\n                price_list: price_list,\r\n                buying: 1\r\n            },\r\n            fields: [\"item_code\", \"price_list_rate\"],\r\n            limit_page_length: defaultItems.length\r\n        },\r\n        callback: function(r) {\r\n            var priceListRates = {};\r\n            if (r.message) {\r\n                r.message.forEach(function(itemPrice) {\r\n                    priceListRates[itemPrice.item_code] = itemPrice.price_list_rate;\r\n                });\r\n            }\r\n\r\n            // Check if the items already exist in the child table\r\n            var existingItems = frm.doc[child_table].map(function(d) { return d.item; });\r\n\r\n            // Add default items to the child table if they don't already exist\r\n            var defaultRows = defaultItems.map(function(itemCode) {\r\n                if (!existingItems.includes(itemCode)) {\r\n                    return {\r\n                        item: itemCode,\r\n                        qty: 1,\r\n                        cost_center: \"Fahaab Energy Depot Soroti - FEU\",\r\n                        rate: priceListRates[itemCode] || 0, // Set to 0 if price not found\r\n                        warehouse: \"PURCHASE STORE - FEU\"\r\n                    };\r\n                }\r\n            }).filter(function(row) { return row; }); // Filter out undefined rows\r\n\r\n            // Add rows to the child table\r\n            defaultRows.forEach(function(row) {\r\n                frm.add_child(child_table, row);\r\n            });\r\n\r\n            // Refresh the child table to show the default rows\r\n            frm.refresh_field(child_table);\r\n        }\r\n    });\r\n}\r\n\r\nfunction fetchOtherItemPrices(frm, child_table, default_currency) {\r\n    // Define default items and their respective suppliers\r\n    var defaultItems = ['URA Customs Duty', 'Fuel Making', 'Transport', 'Clearance'];\r\n    var defaultSuppliers = ['Uganda Revenue Authority', 'Fuel Making Uganda', 'Fahaab Energy Kenya', 'ADAM Fuel Clearance'];\r\n\r\n    // Fetch the default price list for each supplier\r\n    var supplierPriceLists = {};\r\n    var supplierCurrency = {};\r\n    var priceListPromises = defaultSuppliers.map(function(supplier) {\r\n        return new Promise(function(resolve) {\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: \"Supplier\",\r\n                    filters: { name: supplier },\r\n                    fields: [\"default_price_list\", \"default_currency\"],\r\n                    limit_page_length: 1\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.length > 0) {\r\n                        var supplierDetails = r.message[0];\r\n                        var default_currency = supplierDetails.default_currency || \"UGX\"; // Set default currency to \"UGX\" if not found\r\n                        var default_price_list = supplierDetails.default_price_list;\r\n\r\n                        supplierPriceLists[supplier] = default_price_list;\r\n                        supplierCurrency[supplier] = default_currency;\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    // After fetching all price lists, fetch the item prices\r\n    Promise.all(priceListPromises).then(function() {\r\n        var priceFetchPromises = defaultItems.map(function(itemCode, index) {\r\n            var supplier = defaultSuppliers[index];\r\n            var price_list = supplierPriceLists[supplier];\r\n\r\n            return new Promise(function(resolve) {\r\n                frappe.call({\r\n                    method: 'frappe.client.get_list',\r\n                    args: {\r\n                        doctype: \"Item Price\",\r\n                        filters: {\r\n                            item_code: itemCode,\r\n                            price_list: price_list,\r\n                            buying: 1\r\n                        },\r\n                        fields: [\"price_list_rate\"],\r\n                        limit_page_length: 1\r\n                    },\r\n                    callback: function(r) {\r\n                        var price_list_rate = (r.message && r.message.length > 0) ? r.message[0].price_list_rate : 0;\r\n                        // // var price_list_rate = 0;\r\n                        // if (currency == \"USD\") {\r\n                        //     price_list_rate = 3675; // Set rate to 36075 if currency is USD\r\n                        // } \r\n                        resolve({\r\n                            supplier: supplier,\r\n                            item: itemCode,\r\n                            qty: itemCode === 'Clearance' ? 1 : frm.doc.total_qtys || 1,\r\n                            cost_center: \"Fahaab Energy Depot Soroti - FEU\",\r\n                            rate: price_list_rate,\r\n                            currency: supplierCurrency[supplier] || default_currency,\r\n                            price_list: price_list\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        // Add fetched items to the child table\r\n        Promise.all(priceFetchPromises).then(function(defaultRows) {\r\n            var existingItems = frm.doc[child_table].map(function(d) { return d.item; });\r\n\r\n            defaultRows.forEach(function(row) {\r\n                if (!existingItems.includes(row.item)) {\r\n                    frm.add_child(child_table, row);\r\n                }\r\n            });\r\n\r\n            // Refresh the child table to show the default rows\r\n            frm.refresh_field(child_table);\r\n        });\r\n    });\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-05-27 13:28:14.993372",
  "module": "Petro Station App",
  "name": "set values of total qty to other_items",
  "script": "frappe.ui.form.on('Purchase Management', {\r\n    total_qty: function(frm) {\r\n        var defaultItemsToUpdate = ['URA Customs Duty', 'Fuel Making', 'Transport'];\r\n        var totalQty = frm.doc.total_qty;\r\n\r\n        frm.doc.other_items.forEach(function(item) {\r\n            if (defaultItemsToUpdate.includes(item.item)) {\r\n                frappe.model.set_value(item.doctype, item.name, 'qty', totalQty);\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Management",
  "enabled": 1,
  "modified": "2024-05-27 14:51:36.737628",
  "module": "Petro Station App",
  "name": "Set Rate",
  "script": "frappe.ui.form.on('Purchase Management Items', {\r\n    item: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Item Price',\r\n                filters: {\r\n                    item_code: child.item,\r\n                    price_list: frm.doc.price_list,\r\n                    buying: 1\r\n                },\r\n                fields: ['price_list_rate'],\r\n                limit: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    var price_list_rate = r.message[0].price_list_rate;\r\n                    frappe.model.set_value(cdt, cdn, 'rate', price_list_rate); // Set the rate field in the child table\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Purchase Management Suppliers', {\r\n    item: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Item Price',\r\n                filters: {\r\n                    item_code: child.item,\r\n                    price_list: frm.doc.price_list,\r\n                    buying: 1\r\n                },\r\n                fields: ['price_list_rate'],\r\n                limit: 1\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    var price_list_rate = r.message[0].price_list_rate;\r\n                    frappe.model.set_value(cdt, cdn, 'rate', price_list_rate); // Set the rate field in the child table\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Fuel Sales App",
  "enabled": 1,
  "modified": "2024-06-08 16:22:36.493925",
  "module": "Petro Station App",
  "name": "Expense Filter",
  "script": "frappe.ui.form.on('Fuel Sales App', {\r\n    onload: function(frm) {\r\n        frappe.call({\r\n            method: 'petro_station_app.custom_api.api.get_filtered_doctype',\r\n            callback: function(response) {\r\n                if (response.message && response.message.length > 0) {\r\n                    var filteredNames = response.message.map(item => item.name);\r\n                    console.log(filteredNames);\r\n                    \r\n                    // Set query for the 'item' field in the 'expense_items' child table\r\n                    frm.set_query('item', 'expense_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', filteredNames]\r\n                            }\r\n                        };\r\n                    });\r\n                    \r\n                    // Set query for the 'party_type' field in the 'expense_items' child table\r\n                    frm.set_query('party_type', 'expense_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', filteredNames]\r\n                            }\r\n                        };\r\n                    });\r\n\r\n                    // Refresh the 'expense_items' child table to apply the filters\r\n                    frm.refresh_field('expense_items');\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Fuel Sales App",
  "enabled": 1,
  "modified": "2024-06-28 15:49:33.256476",
  "module": "Petro Station App",
  "name": "Dont back or fron date",
  "script": "frappe.ui.form.on('Fuel Sales App', {\r\n    validate: function(frm) {\r\n        let sale_date = frm.doc.date;\r\n        let today = frappe.datetime.get_today();\r\n\r\n        // Fetch user roles asynchronously\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'User',\r\n                name: frappe.session.user\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    var user_roles = r.message.roles.map(role => role.role);\r\n\r\n                    // Check if user has 'Dont Back Date' role\r\n                    if (user_roles.includes('Dont Back Date')) {\r\n                        // For users with 'Dont Back Date' role, validate sale date\r\n                        if (!isDateWithinRange(sale_date, today)) {\r\n                            frappe.msgprint(__('You can only save this document if the sale date is today, one day before, or one day after. Please Contact ACCOUNTS or choose an appropriate date.'));\r\n                            frappe.validated = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.log('Error fetching user roles:', r);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n// Function to check if a date is within one day before or one day after the reference date\r\nfunction isDateWithinRange(date, referenceDate) {\r\n    let formattedDate = frappe.datetime.str_to_obj(date);\r\n    let formattedReferenceDate = frappe.datetime.str_to_obj(referenceDate);\r\n\r\n    // Get the previous day and the next day\r\n    let previousDay = new Date(formattedReferenceDate);\r\n    previousDay.setDate(formattedReferenceDate.getDate() - 1);\r\n\r\n    let nextDay = new Date(formattedReferenceDate);\r\n    nextDay.setDate(formattedReferenceDate.getDate() + 1);\r\n\r\n    // Check if the date is within range\r\n    return (\r\n        formattedDate.getFullYear() === formattedReferenceDate.getFullYear() &&\r\n        formattedDate.getMonth() === formattedReferenceDate.getMonth() &&\r\n        (formattedDate.getDate() === previousDay.getDate() ||\r\n         formattedDate.getDate() === formattedReferenceDate.getDate() ||\r\n         formattedDate.getDate() === nextDay.getDate())\r\n    );\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 0,
  "modified": "2024-06-28 15:50:46.035728",
  "module": "Petro Station App",
  "name": "Dont back or fron date cr",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n    validate: function(frm) {\r\n        let sale_date = frm.doc.date;\r\n        let today = frappe.datetime.get_today();\r\n\r\n        // Fetch user roles asynchronously\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'User',\r\n                name: frappe.session.user\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    var user_roles = r.message.roles.map(role => role.role);\r\n\r\n                    // Check if user has 'Dont Back Date' role\r\n                    if (user_roles.includes('Dont Back Date')) {\r\n                        // For users with 'Dont Back Date' role, validate sale date\r\n                        if (!datesAreEqual(sale_date, today)) {\r\n                            frappe.msgprint(__('You cannot save this document with the sale date set to {0}. Please Contact Accounts or choose today\\'s date.', [sale_date]));\r\n                            frappe.validated = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.log('Error fetching user roles:', r);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n// Function to compare two dates\r\nfunction datesAreEqual(date1, date2) {\r\n    // Convert dates to YYYY-MM-DD format for comparison\r\n    let formattedDate1 = frappe.datetime.str_to_obj(date1);\r\n    let formattedDate2 = frappe.datetime.str_to_obj(date2);\r\n\r\n    return formattedDate1.getFullYear() === formattedDate2.getFullYear() &&\r\n           formattedDate1.getMonth() === formattedDate2.getMonth() &&\r\n           formattedDate1.getDate() === formattedDate2.getDate();\r\n}\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2024-06-28 14:53:48.236877",
  "module": "Petro Station App",
  "name": "Fuel app Cr",
  "script": "frappe.ui.form.on('Fuel Sales Items', {\r\n    qty: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    },\r\n    rate: function (frm, cdt, cdn) {\r\n        calculateTotals(frm);\r\n    }\r\n});\r\n\r\nfunction calculateTotals(frm) {\r\n    var total_qty = 0;\r\n    var grand_total = 0;\r\n    frm.doc.items.forEach(function (item) {\r\n        total_qty += item.qty;\r\n        item.amount = item.qty * item.rate;\r\n        grand_total += item.amount;\r\n    });\r\n    frm.set_value('total_qty', total_qty);\r\n    frm.set_value('grand_totals', grand_total);\r\n    refresh_field('items');\r\n}\r\n\r\nfrappe.ui.form.on('Fuel Sales Items', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        var child_doc = locals[cdt][cdn];\r\n        if (child_doc.item_code) {\r\n            frappe.call({\r\n                method: 'petro_station_app.custom_api.api.get_item_price_rate',\r\n                args: {\r\n                    item_code: child_doc.item_code,\r\n                    price_list: frm.doc.price_list\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        frappe.model.set_value(cdt, cdn, 'rate', r.message);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Credit Sales App', {\r\n    date: function(frm) {\r\n        // Calculate the due date as posting date + 30 days\r\n        var postingDate = new Date(frm.doc.date);\r\n        var dueDate = new Date(postingDate.setDate(postingDate.getDate() + 30));\r\n\r\n        // Set the due date in the form\r\n        frm.set_value('due_date', dueDate);\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Credit Sales App', {\r\n    grand_totals: function(frm) {\r\n        calculateResult(frm);\r\n    },\r\n    additional_discount_amount: function(frm) {\r\n        calculateResult(frm);\r\n    }\r\n});\r\n\r\nfunction calculateResult(frm) {\r\n    // Get the values of field1 and field2\r\n    var field1Value = frm.doc.grand_totals;\r\n    var field2Value = frm.doc.additional_discount_amount;\r\n\r\n    // Perform the subtraction\r\n    var result = field1Value - field2Value;\r\n\r\n    // Update the result field\r\n    frm.set_value('net_total', result);\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2024-06-28 18:14:21.380583",
  "module": "Petro Station App",
  "name": "Fuel App STP Cr",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n  station: function(frm) {\r\n    frappe.call({\r\n      method: 'petro_station_app.custom_api.api.fetch_details_cost_center',\r\n      args: {\r\n        station: frm.doc.station,\r\n      },\r\n      callback: function(r) {\r\n         if (\r\n            console.log(r.message)) {\r\n          var items = r.message.from_pos_profile; // Corrected key name\r\n          var from_price_list = r.message.from_price_list; // Corrected key name\r\n          \r\n          if (from_price_list && Array.isArray(from_price_list) && from_price_list.length > 0) {\r\n            frm.set_value('price_list', from_price_list[0].name);\r\n          } else {\r\n            console.log(\"No price lists data found in response.\");\r\n          }\r\n\r\n          if (items && Array.isArray(items)) {\r\n            // Clear existing items before populating (optional)\r\n            frm.doc.items = [];\r\n\r\n            // Loop through each item in the response\r\n            for (var i = 0; i < items.length; i++) {\r\n              var new_item = frm.add_child('items'); // Create a new child row\r\n\r\n              // Set values from response to new item fields\r\n              new_item.item_code = items[i].custom_fuel; // Replace with actual field names \r\n              new_item.pos_profile = items[i].name;\r\n              new_item.warehouse = items[i].warehouse;\r\n              new_item.rate = items[i].item_price;\r\n              new_item.price_list = from_price_list[0].name;\r\n              // ... Add other relevant fields\r\n\r\n              // Refresh the child table view\r\n              frm.refresh_field('items');\r\n            }\r\n          } else {\r\n            console.log(\"No items data found in response.\");\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Credit Sales App",
  "enabled": 1,
  "modified": "2024-06-28 14:58:26.545840",
  "module": "Petro Station App",
  "name": "Expense Filter Cr",
  "script": "frappe.ui.form.on('Credit Sales App', {\r\n    onload: function(frm) {\r\n        frappe.call({\r\n            method: 'petro_station_app.custom_api.api.get_filtered_doctype',\r\n            callback: function(response) {\r\n                if (response.message && response.message.length > 0) {\r\n                    var filteredNames = response.message.map(item => item.name);\r\n                    console.log(filteredNames);\r\n                    \r\n                    // Set query for the 'item' field in the 'expense_items' child table\r\n                    frm.set_query('item', 'expense_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', filteredNames]\r\n                            }\r\n                        };\r\n                    });\r\n                    \r\n                    // Set query for the 'party_type' field in the 'expense_items' child table\r\n                    frm.set_query('party_type', 'expense_items', function() {\r\n                        return {\r\n                            filters: {\r\n                                name: ['in', filteredNames]\r\n                            }\r\n                        };\r\n                    });\r\n\r\n                    // Refresh the 'expense_items' child table to apply the filters\r\n                    frm.refresh_field('expense_items');\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2024-07-10 18:18:43.343816",
  "module": "Petro Station App",
  "name": "Bank Deposits",
  "script": "frappe.ui.form.on('Payment Entry', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1) {\r\n            frm.add_custom_button(__('Post Bank Deposits'), function() {\r\n                frappe.call({\r\n                    method: 'petro_station_app.custom_api.all_todays_banking.update_bank_deposits',\r\n                    args: {\r\n                        docname: frm.doc.name\r\n                    },\r\n                    callback: function(r) {\r\n                        if (frm.doc.custom_bank_deposits_status) {\r\n                            frappe.msgprint(__('Bank Deposits Entry already posted'));\r\n                        } else if (!r.exc) {\r\n                            // frm.set_value('custom_bank_deposits_status', \"Deposits Made\");\r\n                            frappe.msgprint(__('Bank Deposits Entry Posted successfully'));\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-08-05 12:37:49.819314",
  "module": "Petro Station App",
  "name": "Reference No Set",
  "script": "frappe.ui.form.on('Payment Entry', {\r\n    paid_to: function(frm) {\r\n        // Fetch the account details\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'Account',\r\n                name: frm.doc.paid_to\r\n            },\r\n            callback: function(response) {\r\n                let account = response.message;\r\n                if (account && account.account_type === 'Bank') {\r\n                    frm.set_value('reference_no', frappe.session.user_fullname);\r\n                    frm.set_value('reference_date', frm.doc.posting_date);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Vehicle Plate Update",
  "enabled": 1,
  "modified": "2024-08-09 18:32:42.480003",
  "module": "Petro Station App",
  "name": "Update plate No",
  "script": "frappe.ui.form.on('Vehicle Plate Update', {\n    before_save: function(frm) {\n        // Call the server-side Python function\n        frappe.call({\n            method: 'petro_station_app.custom_api.vehicle_number.update_vehicle_number', // Update this with the correct path to your function\n            args: {\n                target_cost_center: frm.doc.station,\n                from_date: frm.doc.posting_date,\n                to_date: frm.doc.to_date\n            },\n            callback: function(r) {\n                console.log(r)\n                if(r.message) {\n                    frappe.msgprint(__(\"Vehicle numbers have been updated in the Sales Invoice remarks.\"));\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Statement",
  "enabled": 1,
  "modified": "2024-08-23 09:58:03.643936",
  "module": "Petro Station App",
  "name": "Statement",
  "script": "frappe.ui.form.on('Statement', {\r\n    refresh: function(frm) {\r\n        // Add a button to trigger the population of the statement details\r\n        frm.add_custom_button(__('Get Statement Details'), function() {\r\n            get_statement_details(frm);\r\n        });\r\n    }\r\n});\r\n\r\nfunction get_statement_details(frm) {\r\n    frappe.call({\r\n        method: 'petro_station_app.custom_api.statement.statement.get_sales_invoice_details_and_payments',\r\n        args: {\r\n            customer: frm.doc.customer,\r\n            from_date: frm.doc.from_date,\r\n            to_date: frm.doc.to_date,\r\n            cost_center: frm.doc.cost_center\r\n        },\r\n        callback: function(r) {\r\n            console.log(r);\r\n            if (r.message) {\r\n                let data = r.message.sales_invoice_data;\r\n                let running_balance = 0;  // Variable to keep track of running balance\r\n\r\n                // Clear existing child table data\r\n                frm.clear_table('statement_details');\r\n\r\n                // Populate the child table with the fetched invoice data\r\n                data.forEach(function(invoice) {\r\n                    let child = frm.add_child('statement_details');\r\n                    frappe.model.set_value(child.doctype, child.name, 'item_code', invoice.item_code);\r\n                    frappe.model.set_value(child.doctype, child.name, 'vehicle_no', invoice.custom_vehicle_plates);\r\n                    frappe.model.set_value(child.doctype, child.name, 'qty', invoice.qty);\r\n                    frappe.model.set_value(child.doctype, child.name, 'rate', invoice.rate);\r\n                    frappe.model.set_value(child.doctype, child.name, 'amount', invoice.amount);\r\n                    frappe.model.set_value(child.doctype, child.name, 'invoice_date', invoice.posting_date); // Set invoice date\r\n                    frappe.model.set_value(child.doctype, child.name, 'station_inv', invoice.cost_center);  \r\n                    frappe.model.set_value(child.doctype, child.name, 'invoice_vourcher', invoice.invoice_name); \r\n                    frappe.model.set_value(child.doctype, child.name, 'credit_sales_id', invoice.credit_sales_id);\r\n                    frappe.model.set_value(child.doctype, child.name, 'sales_app_id', invoice.sales_app_id);\r\n\r\n                    // Update the running balance\r\n                    running_balance += invoice.amount;  // Add invoice amount to running balance\r\n                    frappe.model.set_value(child.doctype, child.name, 'running_balance', running_balance); // Set running balance\r\n                });\r\n\r\n                // Populate payment details in the child table\r\n                r.message.payments.forEach(function(payment) {\r\n                    let child = frm.add_child('statement_details');\r\n                    frappe.model.set_value(child.doctype, child.name, 'payment_entry', payment.payment_entry_name);\r\n                    frappe.model.set_value(child.doctype, child.name, 'station_pe', payment.cost_center);\r\n                    frappe.model.set_value(child.doctype, child.name, 'payment_date', payment.posting_date); // Set payment date\r\n                    frappe.model.set_value(child.doctype, child.name, 'paid_amount', payment.paid_amount); // Set paid amount\r\n                    \r\n                    // Update the running balance with paid amount\r\n                    running_balance -= payment.paid_amount; // Subtract paid amount from running balance\r\n                    frappe.model.set_value(child.doctype, child.name, 'running_balance', running_balance); // Set updated running balance\r\n                });\r\n\r\n                // Populate GL Entry details in the child table\r\n                r.message.gl_entries.forEach(function(gl_entry) {\r\n                    let child = frm.add_child('statement_details');\r\n                    frappe.model.set_value(child.doctype, child.name, 'journal_date', gl_entry.posting_date); // Set journal date\r\n                    frappe.model.set_value(child.doctype, child.name, 'station_jl', gl_entry.cost_center); // Set cost center\r\n                    frappe.model.set_value(child.doctype, child.name, 'voucher_no', gl_entry.voucher_no); // Set voucher number\r\n                    frappe.model.set_value(child.doctype, child.name, 'amount', gl_entry.debit); // Set debit as amount\r\n                    frappe.model.set_value(child.doctype, child.name, 'paid_amount', gl_entry.credit); // Set credit as paid amount\r\n                    \r\n                    // Update the running balance with GL Entry amounts\r\n                    running_balance += gl_entry.debit;  // Add debit to running balance\r\n                    running_balance -= gl_entry.credit;  // Subtract credit from running balance\r\n                    frappe.model.set_value(child.doctype, child.name, 'running_balance', running_balance); // Set updated running balance\r\n                });\r\n\r\n                // Refresh the field to display the updated child table\r\n                frm.refresh_field('statement_details');\r\n\r\n                // Recalculate totals after populating the child table\r\n                calculateTotals(frm);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction calculateTotals(frm) {\r\n    var total_amount = 0;\r\n    var total_paid = 0;\r\n    frm.doc.statement_details.forEach(function(item) {\r\n        total_amount += item.amount || 0;  // Add amount, default to 0 if undefined\r\n        total_paid += item.paid_amount || 0;  // Add paid amount, default to 0 if undefined\r\n    });\r\n    var outstanding_amount = total_amount - total_paid;\r\n    frm.set_value('total_invoices', total_amount);  // Set total invoices\r\n    frm.set_value('total_paid', total_paid);  // Set total paid\r\n    frm.set_value('total_outstanding_amount', outstanding_amount);  // Set total outstanding amount\r\n\r\n    // Refresh the parent fields\r\n    frm.refresh_field('total_invoices');\r\n    frm.refresh_field('total_paid');\r\n    frm.refresh_field('total_outstanding_amount');\r\n}\r\n",
  "view": "Form"
 }
]